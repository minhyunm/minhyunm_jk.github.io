<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Write What You Know</title>
    <description>.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 17 May 2022 11:58:40 +0900</pubDate>
    <lastBuildDate>Tue, 17 May 2022 11:58:40 +0900</lastBuildDate>
    <generator>Jekyll v3.9.2</generator>
    
      <item>
        <title>TDD Study : week 3</title>
        <description>&lt;h3 id=&quot;부제-&quot;&gt;부제 :&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
참고서적 : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;클린 코드를 위한 테스트 주도 개발(해리 J.W. 퍼시벌 저)&lt;/code&gt;&lt;br /&gt;
환경 : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mac(M1)&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python 3.8.3&lt;/code&gt;,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Django 4.0.4&lt;/code&gt;,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Selenium 4.1.3&lt;/code&gt;,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Firefox&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;chapter-05-&quot;&gt;Chapter 05. &lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;lists/templates/home.html에 아래 내용 추가&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Your To-Do list&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item_text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id_new_item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Enter a to-do item&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;table&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id_list_table&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;에러메시지&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;해결방법&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;print를 활용해 현재 내용 출력&lt;/li&gt;
  &lt;li&gt;현재 상태를 더 잘 나타낼 수 있도록 error 메시지를 변경&lt;/li&gt;
  &lt;li&gt;직접 웹사이트를 들어가 보기&lt;/li&gt;
  &lt;li&gt;time.sleep을 활용하여 테스트 중 일시정지 시키기&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;time.sleep 활용하여 functional_tests.py 수정&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;inputbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ENTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id_list_table'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;에러 확인(CSRF 에러 예상)&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;lists/templates/home.html 수정&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item_text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id_new_item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Enter a to-do item&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    {/% csrf_token /%}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(여기서 {랑 % 붙여 쓴 것때문에 지킬 오류가 나서 중간에 \를 넣었음)&lt;br /&gt;&lt;br /&gt;
에러메세지&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;functional_tests.py 수정(time.sleep 삭제)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;inputbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ENTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id_list_table'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;lists/tests.py 수정&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_home_page_returns_correct_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_home_page_can_save_a_POST_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'POST'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'item_text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'A new list item'&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;home_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A new list item'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;에러메세지&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;lists/views.py 수정&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.http&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.shortcuts&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'item_text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'home.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;lists/templates/home.html 수정&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Your To-Do list&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item_text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id_new_item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Enter a to-do item&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        {/% csrf_token /%}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;table&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id_list_table&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;{/{ new_item_text }\}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;lists/tests.py 수정&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A new list item'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;expected_html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'home.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'new_item_text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'A new list item'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;에러메세지&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;lists/views.py 수정&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'home.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'new_item_text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'item_text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;에러메세지&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;lists/views.py 수정&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'home.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;'new_item_text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'item_text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;에러메세지&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;functional_tests.py 수정&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'1: Buy peacock feathers'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;New to-do item did not appear in table.. its text was:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;에러 메세지&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;functional_tests.py 수정&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'1: Buy peacock feathers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;에러 메세지&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;lists/templates/home.html 수정&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;1: &lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;functional_tests.py 수정&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;에러 메세지&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Tue, 17 May 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2022/tdd-study-week-3/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/tdd-study-week-3/</guid>
        
        
      </item>
    
      <item>
        <title>TDD Study : week 2</title>
        <description>&lt;h3 id=&quot;부제--이건-뭐야-도자기-깨는-장인이야&quot;&gt;부제 : 이건… 뭐야…? 도자기 깨는 장인이야…?&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
참고서적 : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;클린 코드를 위한 테스트 주도 개발(해리 J.W. 퍼시벌 저)&lt;/code&gt;&lt;br /&gt;
환경 : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mac(M1)&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python 3.8.3&lt;/code&gt;,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Django 4.0.4&lt;/code&gt;,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Selenium 4.1.3&lt;/code&gt;,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Firefox&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;chapter-03-단위-테스트를-이용한-간단한-홈페이지-테스트&quot;&gt;Chapter 03. 단위 테스트를 이용한 간단한 홈페이지 테스트&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
앞서 진행한 내용에 좀 더 살을 붙여보도록 하겠다.&lt;br /&gt;
지난 기능 테스트에 작성했듯이 타이틀에 ‘To-Do’라는 문구를 넣어주는 내용도 아마… 추가되겠지?&lt;br /&gt;
그리고 무엇보다 이번 챕터에서는 앱 단위로 개발 테스트를 진행한다.&lt;br /&gt;
즉 단위 테스트(Unit test)를 작성한다!&lt;br /&gt;
이쯤에서 잠깐… 단위 테스트와 기능 테스트의 정확한 차이점이 무엇인지를 짚고 넘어가 보도록 하자.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;단위-테스트-vs-기능-테스트&quot;&gt;단위 테스트 vs 기능 테스트&lt;br /&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;기능 테스트 : 사용자 관점에서 애플리케이션 외부를 테스트&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;단위 테스트 : 프로그래머 관점에서 애플리케이션 내부를 테스트&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;어떤 시점에서 테스트를 진행하느냐에 따라 기능/단위 테스트로 나뉘고,&lt;br /&gt;
때문에 기능 테스트와 단위 테스트는 테스트 스토리부터 방식, 테스트 대상이 차이가 날 수밖에 없다.&lt;br /&gt;
이전까지 이 둘의 개념이 좀 모호했는데 이렇게 보니 굉장히 확연히 다른 개념이었던 것이다…&lt;br /&gt;
아는 만큼 보인다고… 공부 열심히 해야지… 기승전공부…&lt;br /&gt;
&lt;br /&gt;
아무튼 그리하여 이 책을 통해 우리가 개발해나가는 방식은 아래와 같은 순서로 이루어질 예정이다.&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;기능테스트 작성(사용자 관점의 기능성을 정의)&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;기능 테스트가 실패하는 것을 확인 -&amp;gt; 어떤 코드로 테스트를 통과시킬 수 있을지에 대해 고민 -&amp;gt; 단위 테스트를 작성하여 코드가 동작해야 하는 방향성을 정의&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;단위 테스트가 실패하는 것을 확인 -&amp;gt; 단위 테스트를 통과할 수 있을 정도의 최소한의 코드를 작성 -&amp;gt; 반복(기능 테스트가 완전해질 때까지)&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;기능 테스트 재실행하여 동작여부 확인(이 단계에 단위 테스트를 추가로 작성해야 할 수 있음)&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;즉 기능 테스트는 상위 레벨의 개발을, 단위 테스트는 하위 레벨의 개발을 주도한다.&lt;br /&gt;
전체 플로우와 이에 대한 적합성 여부를 판단하는 것은 기능 테스트, 그리고 각 내용 하나하나가 정상동작하는지를 확인하는 것은 단위 테스트라고 생각할 수 있겠다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그럼 이제 슬슬 작업할 앱을 생성해 보자.&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;manage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startapp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lists&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;앱 이름은 책에서 진행한 내용과 동일하게 lists로 넣어봤다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그 다음은 단위 테스트를 작성할 차례다.&lt;br /&gt;
startapp 명령어를 통해 자동 생성된 lists 앱 내부의 파일 중에서 tests.py를 눌러본다. 물론 지금은 django.test에서 TestCase를 임포트한 내용 말고는 아무 것도 적혀있지 않다. 이 TestCase는 앞서 사용했던 unittest.TestCase의 확장 버전이다. 이 파일에 고의적인 실패 테스트를 만들어 본다.&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.test&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SmokeTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_bad_maths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;내용을 보아하니 1+1과 3이 동일한 값인지를 확인하는 테스트인 듯하다.&lt;br /&gt;
이제 아래의 명령어를 입력하면 테스트를 진행한다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;manage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;1+1이 3일리 없으니 이 테스트는 반드시 오류를 리턴하게 되어 있다.&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;Creating test database for alias 'default'...
System check identified no issues (0 silenced).
F
======================================================================
FAIL: test_bad_maths (lists.tests.SmokeTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File &quot;/Users/minh/PycharmProjects/tdd_study/superlists/lists/tests.py&quot;,
	line 7, in test_bad_maths
    self.assertEqual(1 + 1, 3)
AssertionError: 2 != 3

----------------------------------------------------------------------
Ran 1 test in 0.000s

FAILED (failures=1)
Destroying test database for alias 'default'...

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;굳&lt;br /&gt;
&lt;br /&gt;
그럼 이제 앱 내용을 작성해야 한다.&lt;br /&gt;
장고가 어떠한 요청을 받아 처리하는 과정은&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;특정 url에 대한 http request를 받음&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;특정 규칙을 이용해 해당 request에 맞는 view 함수를 결정(url 해석)&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;요청을 처리하여 http response로 반환&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;와 같으므로 우리가 테스트해야 할 내용은 해당 url의 해석이 제대로 이루어지는지 &amp;amp; 올바른 html를 반환하여 기능테스트를 통과하는지 의 두 가지이다.&lt;br /&gt;
&lt;br /&gt;
이에 맞는 테스트코드를 작성해 본다.&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolve&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.test&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lists.views&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;home_page&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SmokeTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_root_url_resolves_to_home_page_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;home_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;여기서 첫 번째 줄은 from django.core.urlresolvers import resolve 라고 되어있었는데&lt;br /&gt;
이게 장고 1.x 버전대 코드라 수정을 해주었다.&lt;br /&gt;
이 내용은 대략 url로 ‘/’가 호출되면 resolve를 실행하여 home_page라는 함수를 호출하라는 내용이다.&lt;br /&gt;
그 후 해당 함수가 home_page 함수가 맞는지를 확인하는 코드가 들어간다.&lt;br /&gt;
이제 코드를 실행하면 오류 메시지는 ImportError: cannot import name ‘home_page’ from ‘lists.views’ 라고 뜬다.&lt;br /&gt;
아직 home_page라는 함수를 만든 적이 없으니 당연하다.&lt;br /&gt;
&lt;br /&gt;
문제는 여기서부터이다. 책에서는 지금부터 본격 TDD의 시작이기 때문에 한 번에 한 줄의 코드만 수정해 갈 것이라고 적혀 있다.&lt;br /&gt;
벌써부터 속이 터진다. 하지만 별 수 없지.&lt;br /&gt;
&lt;br /&gt;
먼저 시급한 문제인 home_page 함수의 부재를 처리해본다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.shortcuts&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Create your views here.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;home_page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;앗 예상치 못했던 진행이다.&lt;br /&gt;
TDD란 이렇게 언 발에 오줌 누기 형식으로 진행되는 것이란 말인가&lt;br /&gt;
아무튼 다시 테스트를 돌리니 당연하지만 오류 메시지가 바뀌어 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;Creating test database for alias 'default'...
System check identified no issues (0 silenced).
E
======================================================================
ERROR: test_root_url_resolves_to_home_page_view (lists.tests.SmokeTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File &quot;/Users/minh/PycharmProjects/tdd_study/superlists/lists/tests.py&quot;, 
	line 9, in test_root_url_resolves_to_home_page_view
    found = resolve('/')
  File &quot;/opt/homebrew/Caskroom/miniforge/base/envs/tdd_study/lib/python3.8/
	site-packages/django/urls/base.py&quot;, line 24, in resolve
    return get_resolver(urlconf).resolve(path)
  File &quot;/opt/homebrew/Caskroom/miniforge/base/envs/tdd_study/lib/python3.8/
	site-packages/django/urls/resolvers.py&quot;, line 683, in resolve
    raise Resolver404({&quot;tried&quot;: tried, &quot;path&quot;: new_path})
django.urls.exceptions.Resolver404: {'tried': [[&amp;lt;URLResolver &amp;lt;URLPattern 
list&amp;gt; (admin:admin) 'admin/'&amp;gt;]], 'path': ''}

----------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (errors=1)
Destroying test database for alias 'default'...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;해당 url 패턴이 지정되어 있지 않기 때문에 오류가 난 것으로 확인된다.&lt;br /&gt;
그렇겠지 urls를 안 건드렸으니까…&lt;br /&gt;
그래서 이번에는 urls를 수습하러 떠난다.&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.contrib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# path('admin/', admin.site.urls),
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'^$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'superlists.views.home'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'home'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이번에도 변함없이 책에는 1.x 버전 장고에 맞춘 코드예제가 나와 있었는데 예를 들면&lt;br /&gt;
include, url, patterns 같은 것들…&lt;br /&gt;
include는 2버전대에서도 종종 써봤지만 아무튼&lt;br /&gt;
patterns는 생략해도 제대로 작동하도록 바뀌었으므로 제거하고, url은 path로 대치하여 코드를 작성했다.&lt;br /&gt;
대충 url로 빈 문자열이 전달될 경우 home이라는 view 함수를 찾아가도록 만드는 내용이다.&lt;br /&gt;
이대로 테스트를 돌리면 이제 또 에러 메시지가 바뀌어 있다.&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;TypeError: view must be a callable or a list/tuple in the case of include().
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이번 에러메시지 너무 길어서 마지막 줄만 긁어옴; 이번은 타입에러다.&lt;br /&gt;
근데 책에 나온 에러는 import error였기 때문에… 뭔가 버전차이가 또 있겠거니&lt;br /&gt;
일단 내 에러메시지의 원인은 urls에서 view 연결하는 부분인 것으로 보여서&lt;br /&gt;
책에 나온 import error랑 같이 뚝딱뚝딱 또 고쳐봤다.&lt;br /&gt;
(정규식이 사라진 이유는 버전차이 때문인지 그걸로 계속 오류가 나서…ㅠ)&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.contrib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lists.views&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;home_page&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# path('admin/', admin.site.urls),
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;home_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'home'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;home_page가 계속 None 상태면 또 오류가 날 것이 분명하므로 이번에는 이쪽도 바꿔준다.&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.shortcuts&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Create your views here.
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그리고 드디어 테스트를 통과했다.&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;Creating test database for alias 'default'...
System check identified no issues (0 silenced).
.
----------------------------------------------------------------------
Ran 1 test in 0.000s

OK
Destroying test database for alias 'default'...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
이제 url을 통한 접근에 문제가 없음을 확인했으니 이번엔 응답을 위한 단위 테스트를 작성할 차례다.&lt;br /&gt;
이번 테스트는 HTML 형식의 실제 응답을 반환하는 함수를 작성해야 한다.&lt;br /&gt;
lists/tests.py 내용을 아래와 같이 고친다.&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolve&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.test&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.http&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpRequest&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lists.views&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;home_page&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomePageTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_root_url_resolves_to_home_page_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;home_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_home_page_returns_correct_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;home_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;lt;html&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;lt;title&amp;gt;To-Do lists&amp;lt;/title&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;lt;/html&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
SmokeTest로 되어있던 클래스명을 HomePageTest로 변경하고, 임포트에 HttpRequest를 추가했다.&lt;br /&gt;
그리고 test_home_page_returns_correct_html이라는 함수를 추가했는데, 이 함수는&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;HttpRequest 객체를 생성하여 사용자가 어떤 요청을 브라우저에 보냈는지 확인&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;요청을 home_page 뷰에 전달하여 응답을 취득(HttpResponse 인스턴스)&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;응답 내용이 특정 html 코드를 가지고 있는지 확인(title 내용에 To-Do lists가 들어있는지 여부 포함)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;의 내용을 담고 있다.&lt;br /&gt;
앞서 정리한 대로 단위 테스트는 기능 테스트에 의해 파생된 하위 개념이기 때문에&lt;br /&gt;
더 상세하고, 실제 코드에 가깝다. 즉 프로그래머의 입장에서 진행해야 한다.&lt;br /&gt;
&lt;br /&gt;
아무튼 위의 테스트를 실행하면 아래의 에러가 뜬다.&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;TypeError: home_page() takes 0 positional arguments but 1 was given
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이제 코드의 에러를 한 줄 한 줄 해결해 나갈 차례다.&lt;br /&gt;
오류를 수정하기 위한 최소한의 코드를 변경한 뒤 테스트를 재실행하기를 반복해 나가야 한다.&lt;br /&gt;
책에서는 이 부분을 단위테스트 코드 주기라고 표시했는데,&lt;br /&gt;
개념적으로 볼 때 한 줄씩 코드를 수정해 테스트한 뒤 적용하는 것은 나노 주기,
단위테스트 단위로 코드를 수정 후 적용하는 것은 RGR 주기라고 이해하고 있어서&lt;br /&gt;
솔직히 여기서 말하는 주기가 어떤 건지 헷갈린다.&lt;br /&gt;
아무튼 시키는 대로 코드 수정을 시작해보도록 한다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;코드 수정 : home_page()에 파라미터로 request를 추가한다&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트 결과&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;self.assertTrue(response.content.startswith(b'&amp;lt;html&amp;gt;'))
AttributeError: 'NoneType' object has no attribute 'content'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;코드 수정 : django.http.HttpResponse를 임포트하여 리턴&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.http&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트 결과&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;self.assertTrue(response.content.startswith(b'&amp;lt;html&amp;gt;'))
AssertionError: False is not true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;코드 수정 : 리턴 내용에 html 코드 추가&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;lt;html&amp;gt;&amp;lt;title&amp;gt;To-Do lists&amp;lt;/title&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트 결과&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;self.assertTrue(response.content.endswith(b'&amp;lt;/html&amp;gt;'))
AssertionError: False is not true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;코드 수정 : 리턴 코드에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/html&amp;gt;&lt;/code&gt; 추가&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;lt;html&amp;gt;&amp;lt;title&amp;gt;To-Do lists&amp;lt;/title&amp;gt;&amp;lt;/html&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트 결과&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;Ran 2 tests in 0.001s

OK
Destroying test database for alias 'default'...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
야호!&lt;br /&gt;
왜인지 모르겠지만 책보다 일찍 테스트를 통과했는데 어디서 잘못 썼는지 모르겠고 의도는 파악했으므로 다 된 것으로 여기겠음.&lt;br /&gt;
자 그럼 기존에 작성했던 functional_tests.py를 다시 실행해보도록 하겠다.&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;functional_tests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트 결과&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;F
======================================================================
FAIL: test_can_start_a_list_and_retrieve_it_later (__main__.NewVisitorTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File &quot;functional_test.py&quot;, line 22, in test_can_start_a_list_and_retrieve_it_later
    self.fail('Finish the test!')   # 강제로 테스트 실패 발생시키기
AssertionError: Finish the test!

----------------------------------------------------------------------
Ran 1 test in 1.282s

FAILED (failures=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;성공! Failed로 뜨는 부분은 브라우저 종료를 위해 심어둔 강제 실패때문에 그렇다.&lt;br /&gt;
이 과정에 놀랍게도 또 한 차례 오류를 겪었는데 서버가 내려가있는 걸 까먹고 진행해서…&lt;br /&gt;
다들 런서버를 까먹지 맙시다!&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;chapter-04-왜-테스트를-하는-것인가&quot;&gt;Chapter 04. 왜 테스트를 하는 것인가?&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;챕터 4의 소제목이 갑자기 뜬금없이 원론적인 질문인 이유는 아마도&lt;br /&gt;
이 쯤에서 한 줄씩 마이크로 수정을 거치는 방식에 회의감을 느끼고 TDD 때려칠까 고민하는 나 같은 사람들을 위해(역시 나만 그런 게 아니었지) 저자가 친절한 설명을 곁들였기 때문일 것이다(이 내용에 약 3p를 할애하심).&lt;br /&gt;
대략 요약하면 지금 고생해 두면 테스트가 나를 대신해 궂은 일들을 해줄 것이다,&lt;br /&gt;
TDD를 익히는 것은 훈련이 필요하기 때문에 자잘한 내용부터 시작해야 한다,&lt;br /&gt;
테스트의 틀을 잘 만들어두면 새로운 테스트를 추가할 때 활용하기 좋다 기타등등.&lt;br /&gt;
맞는 말임을 알면서도 한 편으론 약간 도자기 깨는 장인이 하는 소리 같다는 생각을 떨칠 수가 없는데&lt;br /&gt;
그래 뭐… 나만 그런 게 아니라니 아무튼 힘을 내 본다.&lt;br /&gt;
&lt;br /&gt;
아무튼 다시 테스트로 돌아가서…&lt;br /&gt;
챕터 3에 진행한 내용에다가 이어서 코드를 짜야 하기 때문에 저자는 런서버를 통해 서버를 가동할 것을 강조한다. 바로 열댓 줄 위에 똑같은 소리를 했었기 때문에 약간 인제 야너두 상태가 되면서 나 자신을 너그럽게 봐주게 됨&lt;br /&gt;
자 그럼 이제 이어서 테스트를 마무리해 보자. 코드를 손봐야 한다.&lt;br /&gt;
책 내용대로라면 대충 키 입력 처리를 위한 임포트문 하나가 늘어났고 중간에 h1 내용 확인하는 항목 포함 상세 항목들이 추가됐다.&lt;br /&gt;
자 근데&lt;br /&gt;
오류없이 한 방에 수정이 될 리가&lt;br /&gt;
없죠&lt;br /&gt;
이제 라이브러리 함수 뭐 하나 칠 때마다 호환 안 될까봐 심장이 쫄깃해짐 근데 웃긴건 그 예감 틀리지를 않음&lt;br /&gt;
아니나다를까 find_element_by_tag_name에 줄이 쫙쫙 가는 것이다.&lt;br /&gt;
대충 보니까 함수 형태가 이제 바뀐 모양임…&lt;br /&gt;
find_element(by=By.TAG_NAME, value=’값’) 으로 바꿔달라고 하니 참고하시면 좋을듯 (import도 하나 더 추가해야 함…)&lt;br /&gt;
그리하여 결과적으로 아래와 같은 코드를 작성하게 된다.&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium.webdriver.common.keys&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Keys&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium.webdriver.common.by&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;By&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;unittest&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NewVisitorTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unittest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 테스트 시작 전에 자동호출되는 특수 메소드
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Firefox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;implicitly_wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# 암묵적 대기 3초(로딩대기)
&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 테스트 완료 후에 자동호출되는 특수 메소드
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tearDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# test로 시작하는 모든 메소드는 테스트 메소드이며 클래스당 하나 이상의 테스트 메소드 작성 가능
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_can_start_a_list_and_retrieve_it_later&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 유저가 웹사이트를 확인한다
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'http://localhost:8000'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# 웹 페이지 타이틀과 헤더가 'To-Do'를 표시하고 있다
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'To-Do'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 테스트용 어설션을 위해 assertIn 사용
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;header_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'h1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'To-Do'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# 유저가 작업을 추가하기로 한다
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;inputbox&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id_new_item'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;inputbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'placeholder'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'작업 아이템 입력'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# 할일 내용을 텍스트 상자에 입력한다 (예: 공작깃털 사기)
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;inputbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'공작깃털 사기'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# 엔터키를 치면 페이지가 갱신되고 작업 목록에 해당 할일 내용이
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# &quot;1: 공작깃털 사기&quot; 형식으로 추가된다
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;inputbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ENTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id_list_table'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'tr'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'1: 공작깃털 사기'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# 추가 아이템을 입력할 수 있는 여분의 텍스트 상자가 존재한다
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# 다른 할일을 입력한다(예: &quot;공작깃털을 이용해서 그물 만들기&quot;)
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Finish the test!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 강제로 테스트 실패 발생시키기
&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 내용을 테스트해 보면 h1을 찾지 못해서 아래와 같은 오류가 뜬다.&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: h1
Stacktrace:
WebDriverError@chrome://remote/content/shared/webdriver/Errors.jsm:183:5
NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.jsm:395:5
element.find/&amp;lt;/&amp;lt;@chrome://remote/content/marionette/element.js:300:16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기까지 왔으면 테스트는 제대로 작성한 것이고 이에 맞춰 코드를 수정해야 한다.&lt;br /&gt;
그런데 이쯤에서 떠올려야 할 규칙사항 : &lt;b&gt;상수는 테스트하지 마라&lt;/b&gt;&lt;br /&gt;
이것은 단위 테스트를 할 때의 일반적인 규칙 중 하나라고 한다. 다들 나만 빼고 언제 그런 규칙을… 정한 거야…?&lt;br /&gt;
정리하자면 로직이나 흐름 제어, 설정 등을 테스트하기 위한 단위 테스트에서 특정 문자열을 체크하는 것이 의미가 없기 때문이라고 한다. 이런 경우는 템플릿을 이용하여 구문 검증을 하는 편이 더 효율적이라고. 듣고 보니 그러하다.&lt;br /&gt;
&lt;br /&gt;
이런 설명이 구구절절 나온 것은 당연하게도 모두 템플릿 테스트 코드를 작성하기 위한 밑밥이다.&lt;br /&gt;
지금부터 템플릿을 사용하기 위한 리팩터링(Refactoring, 기능을 바꾸지 않고 코드 자체를 개선하는 작업)에 들어간다.
지금까지도 충분히 한 줄씩 수정을 해 왔지만, 리펙터링 작업을 할 때는 기존에 잘 되던 기능이 바뀌면 안 되기 때문에 특히 더더욱 조심해서 한 번에 한 가지씩만 수정을 해야 한다고 하니 참고하자.&lt;br /&gt;
&lt;br /&gt;
리펙터링을 진행하기 위해서는 먼저 그 자체로 이미 테스트를 무사히 통과하는 코드가 필요한데&lt;br /&gt;
우리의 코드는 알다시피 테스트를 통과했다. 따라서 작업내용을 표시할 템플릿 파일을 만들러 간다.&lt;br /&gt;
&lt;br /&gt;
지금까지 작업한 lists 앱 폴더 하위에 templates 폴더를 생성하고, home.html 파일을 만든다.&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;To-Do lists&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그리고 views.py 파일에도 렌더 페이지 부분을 추가해 준다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.shortcuts&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.http&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'home.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그리고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python manage.py test&lt;/code&gt;로 확인해 본다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;======================================================================
ERROR: test_home_page_returns_correct_html (lists.tests.HomePageTest)
----------------------------------------------------------------------
...
    raise TemplateDoesNotExist(template_name, chain=chain)
django.template.exceptions.TemplateDoesNotExist: home.html

----------------------------------------------------------------------
Ran 2 tests in 0.002s

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;중간에 상세한 오류는 생략하고… 대략적으로 템플릿을 못 찾는다는 의미임&lt;br /&gt;
왜 못찾느냐 그것은 우리가 settings.py를 손대지 않았기 때문이다.&lt;br /&gt;
장고 좀 건드려 본 사람들은 모두 아는 국룰 제1항 그것은 INSTALLED_APPS에 앱이름 추가하기…&lt;br /&gt;
이 책은 이제까지 현란한 한 줄 코드 수정을 선보이며 나의 혼을 쏙 빼놓아서 앱 추가조차 까먹게 만들고는… 이제 와서 앱을 추가 안 했잖니^^라며… 나를 놀린 것이다… 농락당한 기분인걸…?&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.contrib.admin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.contrib.auth'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.contrib.contenttypes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.contrib.sessions'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.contrib.messages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.contrib.staticfiles'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'lists'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;옜소&lt;br /&gt;
이제 됐겠지?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;----------------------------------------------------------------------
Ran 2 tests in 0.001s

OK
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;됐당&lt;br /&gt;
다음은 상수를 테스트하지 않고 템플릿을 이용해서 렌더링하는 것을 테스트하도록 수정해주어야 하…는데 장고의 render_to_string을 쓰면 쉽다고 한다. lists/tests.py 파일을 다음과 같이 수정한다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolve&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.test&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.http&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpRequest&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.template.loader&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_to_string&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lists.views&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;home_page&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomePageTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_root_url_resolves_to_home_page_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;home_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_home_page_returns_correct_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;home_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;expected_html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'home.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;리스폰스 콘텐트의 바이트 데이터를 .decode() 함수를 써서 유니코드로 변환하고, 문자열 대 문자열로 비교를 거친다. 여기서 중요한 점은 상수가 아닌 구현 결과물을 비교하는 것이다.&lt;br /&gt;
단위 테스트 수정이 끝났다면 이제 다시 home.html 템플릿에 부족한 내용을 추가하러 간다.&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;To-Do lists&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Your To-Do list&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;기본적인 구조 추가와 더불어 h1 태그를 추가해 주었다. 이제 기능 테스트를 다시 돌려 보면&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;selenium.common.exceptions.NoSuchElementException: Message: 
Unable to locate element: [id=&quot;id_new_item&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그려 고마우이&lt;br /&gt;
다음 내용을 수정한다.&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;To-Do lists&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Your To-Do list&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id_new_item&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;다시 테스트&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;Traceback (most recent call last):
  File &quot;functional_tests.py&quot;, line 29, 
	in test_can_start_a_list_and_retrieve_it_later
    self.assertEqual(
AssertionError: '' != '작업 아이템 입력'
+ 작업 아이템 입력
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;아니 망할 거 알면서 테스트 돌려야 하는 과정 너무 스트레스다&lt;br /&gt;
아무튼 다음 내용을 고치러 간다.&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;To-Do lists&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Your To-Do list&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id_new_item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;작업 아이템 입력&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;테스트 결과&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;
selenium.common.exceptions.NoSuchElementException: 
Message: Unable to locate element: [id=&quot;id_list_table&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그려 고마우이…&lt;br /&gt;
이제 테이블을 추가한다.&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;To-Do lists&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Your To-Do list&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id_new_item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;작업 아이템 입력&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;table&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id_list_table&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;테스트 결과&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;Traceback (most recent call last):
  File &quot;functional_tests.py&quot;, line 43, in test_can_start_a_list_and_retrieve_it_later
    self.assertTrue(
AssertionError: False is not true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;으잉 갑자기 이건 뭐지&lt;br /&gt;
다행히 책에도 똑같은 에러가 나고 있다. 오류 내용을 명확히 보기 위해 기능 테스트 파일의 assertTrue 함수에 실패 메시지를 정의해 준다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;By&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'tr'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'1: 공작깃털 사기'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;신규 작업이 테이블에 표시되지 않는다&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;다시 테스트&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-command&quot;&gt;AssertionError: False is not true : 신규 작업이 테이블에 표시되지 않는다
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;야쓰&lt;br /&gt;
이 내용은 폼 제출 처리를 구현해야 하기 때문에 다음 챕터로 넘어간다.&lt;br /&gt;
길었던 3-4챕터가 이렇게 마무리되고… 나의 하루도… 마무리된다… 이제 잘 수 있어…&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 03 May 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2022/tdd-study-week-2/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/tdd-study-week-2/</guid>
        
        
      </item>
    
      <item>
        <title>TDD Study : week 1</title>
        <description>&lt;h3 id=&quot;부제--아니-그게-아니고-나는-파이어폭스를-안-써서-그래서-그런-거거든&quot;&gt;부제 : 아니 그게 아니고 나는 파이어폭스를 안 써서 그래서 그런 거거든&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
참고서적 : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;클린 코드를 위한 테스트 주도 개발(해리 J.W. 퍼시벌 저)&lt;/code&gt;&lt;br /&gt;
환경 : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mac(M1)&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python 3.8.3&lt;/code&gt;,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Django 4.0.4&lt;/code&gt;,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Selenium 4.1.3&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
각 챕터에 필요한 라이브러리들은 미리 설치를 하고 진행했다.&lt;br /&gt;
셀레늄의 경우 버전 정보가 따로 보이지 않아서 그냥 최신 버전으로 설치해서 활용했고&lt;br /&gt;
파이썬이랑 장고 버전은 책과 달리 제멋대로인데,&lt;br /&gt;
파이썬의 경우 M1에서 3.7 이하 특정 버전들은 활용하기 매우 번거롭고 귀찮기 때문에 대충 3.8 버전대로 진행했고&lt;br /&gt;
그렇다보니 Django 1.7이 파이썬 3.6 이후로는 호환이 안 되어서(HTMLParseError가 남) 이것도 그냥 최신 버전으로 깔았다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;tddtest-driven-development&quot;&gt;TDD(Test-Driven Development)&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;TDD 즉 테스트 주도 개발이란 간단히 말해 어떤 내용을 개발하기에 앞서 이를 위한 테스트 코드를 먼저 작성하고, 이 내용을 기반으로 개발을 해 나가는 방식을 의미한다.&lt;br /&gt;
개발 속도가 느려진다는 단점 &amp;amp; 필요한 기능에 대한 깔끔한 개발을 할 수 있다는 장점이 있다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;chapter-01-기능-테스트를-이용한-django-설치&quot;&gt;Chapter 01. 기능 테스트를 이용한 Django 설치&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
모든 것을 테스트부터 거치는 TDD 방식에 걸맞게, 책에서는 설치 직후 장고의 runserver 정상 실행 여부부터 테스트할 수 있도록 예시 코드를 제공한다.&lt;br /&gt;
해당 코드는 아래와 같으며, 과제를 위한 프로젝트 폴더 안에  functional_tests.py 라는 이름으로 저장한다. (코드 실행 전에 selenium 설치가 필요하다.)&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Firefox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'http://localhost:8000'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Django'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 코드를 실행하려면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python functional_tests.py&lt;/code&gt;로 진행하면 된다.&lt;br /&gt;
자 그런데 우리는 아직 런서버는커녕 장고 프로젝트를 만들지도 않았다.&lt;br /&gt;
그러니까  위의 코드를 실행하면 파이어폭스 창이 뜨면서 ‘연결할 수 없음’이 떠야 정상…이지만&lt;br /&gt;
어째서인지 나의 터미널에는 FileNoeFoundError: [Errno 2] No such file or directory: ‘geckodriver’가 뜬다.&lt;br /&gt;
뭐임&lt;br /&gt;
당황하지 않고 에러메시지를 그대로 쭉 긁어 검색을 돌린 결과…&lt;br /&gt;
대충 geckodriver가 있어야 selenium에서 타 브라우저를 자유롭게 쓸 수 있다는 내용인 듯한 스택오버플로우 글들이 좌라락 떴고&lt;br /&gt;
뚝딱이처럼 나는 그냥 그들이 시키는 대로 geckodriver를 깔았다.&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-commandline&quot;&gt;brew install geckodriver
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;간단!&lt;br /&gt;
이제 됐겠지&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-commandline&quot;&gt;selenium.common.exceptions.SessionNotCreatedException:
Message: Expected browser binary location, 
but unable to find binary in default location, no 'moz:firefoxOptions.binary' 
capability provided, and no binary flag set on the command line
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;응 안됐음&lt;br /&gt;
이것은 또 무엇이냐… 변함없이 내 친구 스택오버플로우를 찾아서 별 이상한 방법들을 다 시도해 봤으나&lt;br /&gt;
오류는 멈추지를 않고&lt;br /&gt;
급기야 나는 파폭에 binary 파일이 따로 있는 것인가 받아야 하는 것인가 하는… 고민에 이르렀다.&lt;br /&gt;
그런데…&lt;br /&gt;
&lt;br /&gt;
아… 지킬에 이미지 첨부하는 방법이 너무 번거로워서 쓸 수가 없네&lt;br /&gt;
아무튼 대충…&lt;br /&gt;&lt;/p&gt;
&lt;h5 id=&quot;런치패드를-눌러본-짤&quot;&gt;런치패드를 눌러본 짤…&lt;/h5&gt;
&lt;h4 id=&quot;런치패드를-샅샅이-뒤져보는-짤&quot;&gt;런치패드를 샅샅이 뒤져보는 짤…&lt;/h4&gt;
&lt;h3 id=&quot;파이어폭스가-없는-짤&quot;&gt;파이어폭스가 없는 짤…&lt;/h3&gt;
&lt;p&gt;이런걸 순차적으로 생각해주심 됨. 마지막거는 좀 화질 깨질 때까지 클로즈업한 느낌으로 떠올려주심 좋겠음&lt;br /&gt;&lt;br /&gt;
파이어폭스가 아예 안 깔려있었던 것이다. 바보 아님?&lt;br /&gt;
하여튼 개발은 나 바보 아님? 이랑 나 좀 천재인듯 을 반복하는 과정이기 때문에… 오늘치 바보 아님? 은 파이어폭스인 걸로…&lt;br /&gt;&lt;br /&gt;
그래서&lt;br /&gt;
환경 : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mac(M1)&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python 3.8.3&lt;/code&gt;,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Django 4.0.4&lt;/code&gt;,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Selenium 4.1.3&lt;/code&gt;,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Firefox&lt;/code&gt; &amp;lt;-NEW!&lt;br /&gt;&lt;br /&gt;
파이어폭스를 받고 났더니 매우 멀쩡히 정상적으로 드디어 ‘연결할 수 없음’이 떴다!&lt;br /&gt;
여전히 이미지 첨부가 귀찮기 때문에 대충… 연결 못한 브라우저 짤을 상상해주시면 됨&lt;br /&gt;
물론 셀레늄에서 파이어폭스 대신 다른 브라우저를 써도 된다.(크롬 쓰려면 chromedriver를 받아야 한다는 듯)&lt;br /&gt;
나는 정직하게 책을 따라하고 싶었기 때문에 그냥 파이어폭스를 깔고 끝냈다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;자 그러면 이제 드디어 본격적으로 장고 프로젝트를 만들 시간이 왔다. 나참 챕터1부터 이렇게 고될 일인지? 물론 그건 다 내가 바보인 탓이지만&lt;br /&gt;
아무튼 익숙한 방식으로 대충 장고 프로젝트를 하나 만든다. 여기서는 superlists라는 이름으로 만들었길래 나도 그대로 했다.&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-commandline&quot;&gt;django-admin startproject superlists
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 주의할 점 : 책에서는 django-admin.py 를 써서 만들라고 되어있지만 그대로 했다간 이건 더 이상 지원이 되지 않는다는 뭐 그런 비슷한 경고를 직면하게 된다.&lt;br /&gt;
경고만 뜨고 플젝생성은 제대로 해주긴 하는데 아무튼 장고에서 바꿔달라고 하니까 .py는 빼고 바꿔주는 게 정신건강에 좋을 듯하다.&lt;br /&gt;&lt;br /&gt;
그 뒤엔 아까 만든 functional_tests.py를 프로젝트 내부 바닥 위치에 옮겨주고(mv 명령어를 쓰시든 그냥 복사붙여넣기 하시든 취향껏… 근데 이때 에디터 프로젝트 베이스 폴더 위치를 새 위치로 변경해줘야 추후 장고 코드 쓸 때 임포트가 제대로 된다)&lt;br /&gt;
우리의 칭구 runserver를 입력한다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-commandline&quot;&gt;python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;런서버가 문제없이 진행되어서 127.0.0.1:8000 어쩌구 중지하려거든 컨트롤C를 누르시오 까지 떴다면 이제 다시 아까의 테스트파일을 실행해 본다.&lt;br /&gt;
그럼 드디어 익숙한 장고 첫화면이 파이어폭스 화면에 뜬 모습을 보게 된다!&lt;br /&gt;
하지만 장고 버전 차이 때문인지 브라우저 타이틀 내용에 Django가 안 들어가서 결국 어설션 에러가 뜬다.&lt;br /&gt;
그래서 테스트코드의 마지막 줄 assert 부분 코드를 아래와 같이 바꿔주었더니 잘 되었다.&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'successfully'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이게 이렇게까지 설명할 내용이 아니었던 것 같은데 쓰다보니 사족이 붙어서 구구절절해졌기 때문에 반성하는 마음에 깃 커밋하는 내용은 몽땅 생략하도록 하겠음&lt;br /&gt;
자세한 설명이 필요하시면 책을 구매하시거나 구매하세요! 화이팅!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;chapter-02-unittest-모듈을-이용한-기능-테스트-확장&quot;&gt;Chapter 02. unittest 모듈을 이용한 기능 테스트 확장&lt;br /&gt;&lt;br /&gt;&lt;/h3&gt;

&lt;p&gt;두 번째 챕터에서에 와서야 비로소 우리가 만들고 있는 게 To-Do 사이트 구축이라는 것을 알게 된다.&lt;br /&gt;
만들어두면 제법 쓸모가 있을 아이템이기 때문에 만족스럽다.&lt;br /&gt;
이제 필요한 기능이 어떤 것들인지 구상하는 단계에 왔기  때문에 기능 테스트(Functional test, FT==승인 테스트==종단간 테스트)를 이용한 설계에 들어가야 한다.&lt;br /&gt;
(이를 통해 유저 관점에서 애플리케이션을 확인하고 이해할 수 있다.)&lt;br /&gt;
&lt;br /&gt;
여기서 강조된 내용은 FT가 사람이 이해할 수 있는 스토리(주로 유저단의 흐름을 따라가는 User story)를 가지고 있어야 한다는 것이다.&lt;br /&gt;
즉 프로그래머가 아닌 사람(기획자, QC담당자 등)이 보아도 한 눈에 이해할 수 있도록 주석 등으로 깔끔히 정리가 되어야 한다.&lt;br /&gt;
FT만으로도 요구사항과 특징을 논의할 수 있어야 한다는데, TDD를 통해 개발 시간이 길어질 것을 생각하면 이런 부분에서 문서 단계를 줄이는 게 확실히 효율적일 것 같다.&lt;br /&gt;
&lt;br /&gt;
다시 우리가 만들던 To-Do 사이트로 돌아와서…이 챕터에서는 애자일(Agile) 개발 방식에서 진행하듯이 최소 기능 애플리케이션을 구축해 테스트 하는 것을 쬐끔 맛보기할 수 있다.&lt;br /&gt;
먼저 사용자가 작업을 입력하고 이를 저장하는 기능을 구현하기 위한 준비에 들어간다.&lt;br /&gt;
평소 같으면 바로 모델 설계에 들어갔겠지만 TDD이므로 다른 모든 작업에 앞서 챕터1에서 만들어둔 functional_tests.py 파일에 테스트용 스토리를 추가한다.&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Firefox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

 &lt;span class=&quot;c1&quot;&gt;# 유저가 웹사이트를 확인한다
&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'http://localhost:8000'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

 &lt;span class=&quot;c1&quot;&gt;# 웹 페이지 타이틀과 헤더가 'To-Do'를 표시하고 있다
&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'To-Do'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Browser title was &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;

 &lt;span class=&quot;c1&quot;&gt;# 유저가 작업을 추가하기로 한다
&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;# 할일 내용을 텍스트 상자에 입력한다 (예: 공작깃털 사기)
&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 엔터키를 치면 페이지가 갱신되고 작업 목록에 해당 할일 내용이
&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# &quot;1: 공작깃털 사기&quot; 형식으로 추가된다
&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;# 추가 아이템을 입력할 수 있는 여분의 텍스트 상자가 존재한다
&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 다른 할일을 입력한다(예: &quot;공작깃털을 이용해서 그물 만들기&quot;)
&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;# 페이지가 다시 갱신되고, 두 개 아이템이 목록에 보인다
&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 유저는 사이트가 입력한 목록을 저장하고 있는지 궁금하다
&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 사이트는 유저를 위한 특정 URL을 생성해준다
&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 이때 URL에 대한 설명도 함께 제공된다
&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;# 해당 URL에 접속하면 유저가 만든 작업 목록이 그대로 있는 것을 확인할 수 있다
&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;# 이용을 마친다
&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;추가가 완료되었으면 runserver를 통해 서버를 시작한 뒤 테스트를 실행한다.&lt;br /&gt;
위의 내용을 보면 assertion이 타이틀에서 ‘To-Do’를 찾도록 수정되었는데, 현재 해당 내용은 개발되어 있지 않으므로 오류가 날 것이다.&lt;br /&gt;
여기서는 오류 메시지를 좀 더 명확히 표시하기 위해  실제 표시된 타이틀을 함께 출력하도록 추가했다.&lt;br /&gt;&lt;br /&gt;
오류 내용은 아래와 같다.&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-commandline&quot;&gt;AssertionError: Browser title was The install worked successfully! Congratulations!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;테스트가 끝난 브라우저 창을 닫아주는 등 소소한 내용을 추가해줄 때 unittest 모듈을 사용하면 편하다.&lt;br /&gt;
테스트 코드를 아래와 같이 다시 수정한다.&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;unittest&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NewVisitorTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unittest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 테스트 시작 전에 자동호출되는 특수 메소드
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Firefox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;implicitly_wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# 암묵적 대기 3초(로딩대기)
&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 테스트 완료 후에 자동호출되는 특수 메소드
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tearDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# test로 시작하는 모든 메소드는 테스트 메소드이며 클래스당 하나 이상의 테스트 메소드 작성 가능
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_can_start_a_list_and_retrieve_it_later&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 유저가 웹사이트를 확인한다
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'http://localhost:8000'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# 웹 페이지 타이틀과 헤더가 'To-Do'를 표시하고 있다
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'To-Do'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 테스트용 어설션을 위해 assertIn 사용
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Finish the test!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# 강제로 테스트 실패 발생시키기
&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 유저가 작업을 추가하기로 한다
&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 할일 내용을 텍스트 상자에 입력한다 (예: 공작깃털 사기)
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# 엔터키를 치면 페이지가 갱신되고 작업 목록에 해당 할일 내용이
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# &quot;1: 공작깃털 사기&quot; 형식으로 추가된다
&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 추가 아이템을 입력할 수 있는 여분의 텍스트 상자가 존재한다
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# 다른 할일을 입력한다(예: &quot;공작깃털을 이용해서 그물 만들기&quot;)
&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 페이지가 다시 갱신되고, 두 개 아이템이 목록에 보인다
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# 유저는 사이트가 입력한 목록을 저장하고 있는지 궁금하다
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# 사이트는 유저를 위한 특정 URL을 생성해준다
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# 이때 URL에 대한 설명도 함께 제공된다
&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 해당 URL에 접속하면 유저가 만든 작업 목록이 그대로 있는 것을 확인할 수 있다
&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 이용을 마친다
&lt;/span&gt;
        
&lt;span class=&quot;c1&quot;&gt;# 해당 스크립트가 커맨드라인을 통해 실행되었을 경우에만 unittest 가동
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;unittest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ignore'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이제 실행하면 아래와 같이 실패 메시지가 뜬다. 만세!&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-commandline&quot;&gt;F
======================================================================
FAIL: test_can_start_a_list_and_retrieve_it_later (__main__.NewVisitorTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File &quot;functional_test.py&quot;, line 21, in test_can_start_a_list_and_retrieve_it_later
    self.assertIn('To-Do', self.browser.title)  # 테스트용 어설션을 위해 assertIn 사용
AssertionError: 'To-Do' not found in 'The install worked successfully! Congratulations!'

----------------------------------------------------------------------
Ran 1 test in 2.095s

FAILED (failures=1)
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Fri, 29 Apr 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2022/tdd-study-week-1/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/tdd-study-week-1/</guid>
        
        
      </item>
    
      <item>
        <title>TDD Study : week 0</title>
        <description>&lt;h4 id=&quot;유용한-tdd-개념&quot;&gt;유용한 TDD 개념&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;사용자 스토리(User story) : 사용자 관점에서 어떻게 애플리케이션이 동작해야 하는지 기술한 것. 기능 테스트 구조화를 위해 사용&lt;/li&gt;
  &lt;li&gt;예측된 실패(Expected failure) : 의도적으로 구현한 테스트 실패&lt;/li&gt;
  &lt;li&gt;기능 테스트 : 사용자 관점에서 애플리케이션 외부를 테스트&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;단위 테스트 : 프로그래머 관점에서 애플리케이션 내부를 테스트&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 29 Apr 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2022/tdd-study-week-0/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/tdd-study-week-0/</guid>
        
        
      </item>
    
  </channel>
</rss>
